#!/usr/bin/env bash

# Define function sed_inplace that works on both GNU and BSD sed
function sed_inplace() {
    local file=$2
    local command=$1
    local tmp_file=$(mktemp)

    sed -e "${command}" "${file}" >"${tmp_file}"
    mv "${tmp_file}" "${file}"
}

var_files=("deploy-cluster/variables.tf" "deploy-cluster/variables-common.tf" "deploy-loadbalancer/vairables.tf")
tfvars_files=("deploy-cluster/terraform.tfvars" "deploy-loadbalancer/terraform.tfvars")

# Concatenate the contents of the elements of var_files into a single file
for var_file in "${var_files[@]}"; do
    if [ -f "$var_file" ]; then
        cat "$var_file" >>all-variables.tf
    fi
done

# Concatenate the contents of the elements of tfvars_files into a single file
for tfvars_file in "${tfvars_files[@]}"; do
    if [ -f "$tfvars_file" ]; then
        cat "$tfvars_file" >>all-tfvars.tf
    fi
done

var_file="all-variables.tf"

# Ajout d'une ligne vide à la fin du fichier
echo "" >>$var_file

# Récupération des noms de variables déclarées dans le fichier
varnames=$(grep "^variable" $var_file | sed 's/^.*variable "\(.*\)".*$/\1/p' | awk '!a[$0]++')

# Création d'un fichier temporaire qui contiendra les variables triées et sans doublons
tmp_file=$(mktemp)
while read -r varname; do
    sed -n "/variable \"$varname\"/,/^}/p" $var_file | sed -n '1,/^}/p' >>$tmp_file
    echo "" >>$tmp_file
done <<<"$varnames"

# Suppression des doublons
cat $tmp_file >$var_file
# Suppression du fichier temporaire
rm $tmp_file

# Parse the all-variables.tf file and extract the variable names and descriptions
mapfile -t variable_names < <(sed -n 's/^.*variable "\(.*\)".*$/\1/p' all-variables.tf)
mapfile -t variable_descs < <(sed -n 's/^.*description *= *"\(.*\)".*$/\1/p' all-variables.tf)

# Create the tfvars_file of tfvars_files from their templates
for tfvars_file in "${tfvars_files[@]}"; do
    if [ -f "$tfvars_file" ]; then
        read -p "Are you sure you want to overwrite $tfvars_file? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Aborting..."
            continue
        fi
    fi
    cat "${tfvars_file}.template" >"$tfvars_file"
done

# Loop through each variable and prompt the user for a value
for i in "${!variable_names[@]}"; do
    var_name=${variable_names[i]}
    var_desc=${variable_descs[i]}

    # Extract the default value for the current variable (if available)
    var_default=$(sed -n "/variable \"$var_name\"/,/^}/p" all-variables.tf | grep "default" | sed -E 's/^.*default *= *"?([^"]*)"?.*$/\1/')

    # If the var_name doesn't exist in the .tfvars files, continue to the next loop iteration
    if ! $(grep -q "$var_name" all-tfvars.tf); then
        continue
    fi

    # Check if the variable has a default value
    if [ -n "$var_default" ]; then
        default_variables+=("$var_name")
        default_descs+=("$var_desc")
        default_defaults+=("$var_default")
    else
        non_default_variables+=("$var_name")
        non_default_descs+=("$var_desc")
    fi
done

# Loop through variables with no default values first
for i in "${!non_default_variables[@]}"; do
    var_name=${non_default_variables[i]}
    var_desc=${non_default_descs[i]}

    if [ "$var_name" == "argocd_password" ]; then
        read -p "ArgoCD password : " argocd_password
        while [ -z "$argocd_password" ]; do
            read -p "You have to specify a value for \"argocd_password\": " argocd_password
        done
        DOCKER_USER="$(id -u):$(id -g)" \
        argocd_password_hashed="$(docker-compose run --quiet-pull --rm argocd-cli argocd account bcrypt --password $argocd_password)"

        # Store the variable name and value in the $tfvars_file file if the variable is declared in the file
        for tfvars_file in "${tfvars_files[@]}"; do
            if $(grep -q "argocd_password" "$tfvars_file"); then
                sed_inplace "s/^argocd_password *= *\".*\"$/argocd_password=\"$argocd_password_hashed\"/" "$tfvars_file"
            fi
        done

    else
        # Prompt the user for a value
        read -p "$var_desc: " var_value

        # If the user entered nothing, prompt again
        while [ -z "$var_value" ]; do
            read -p "You have to specify a value for \"$var_name\": " var_value
        done

        # Store the variable name and value in the $tfvars_file file if the variable is declared in the file
        for tfvars_file in "${tfvars_files[@]}"; do
            if $(grep -q "$var_name" "$tfvars_file"); then
                sed_inplace "s/^$var_name *= *\".*\"$/$var_name=\"$var_value\"/" "$tfvars_file"
            fi

        done
    fi
done

# Loop through variables with default values next
for i in "${!default_variables[@]}"; do
    var_name=${default_variables[i]}
    var_desc=${default_descs[i]}
    var_default=${default_defaults[i]}

    # Display the default value to the user
    read -p "$var_desc (default \"$var_default\", leave blank): " var_value

    # If the user entered nothing, use the default value
    if [ -z "$var_value" ]; then
        var_value="$var_default"
    fi

    # Store the variable name and value in the $tfvars_file file if the variable is declared in the file
    for tfvars_file in "${tfvars_files[@]}"; do
        if $(grep -q "$var_name" "$tfvars_file"); then
            sed_inplace "s/^$var_name *= *\".*\"$/$var_name=\"$var_value\"/" $tfvars_file
        fi
    done
done

# Remove all-variables.tf and all-tfvars.tf
rm all-variables.tf all-tfvars.tf
